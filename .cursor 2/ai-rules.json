{
  "rules": [
    {
      "id": "variant-arch",
      "title": "Variant Architecture",
      "description": "All variants must extend VariantLayout, define static variantStyle, and implement renderLayout()",
      "code": "export class AHTryBuyWidget extends VariantLayout {\n  static variantStyle = css`...`;\n  renderLayout() { ... }\n}",
      "relationships": ["aem-mappings", "lifecycle-mgmt"]
    },
    {
      "id": "attr-binding",
      "title": "Attribute/Property Binding",
      "description": "Use Lit's reflect: true for two-way attribute/property binding",
      "code": "static properties = {\n  borderColor: { type: String, reflect: true }\n};"
    },
    {
      "id": "css-vars",
      "title": "CSS Variable Hierarchy",
      "description": "Follow --spectrum-* > --merch-card-* > --consonant-merch-* priority",
      "code": ":host {\n  border-color: var(--spectrum-gray-800, var(--merch-card-border, #ccc));\n}"
    },
    {
      "id": "hydration-flow",
      "title": "Hydration Lifecycle",
      "description": "AEM → hydrate → attributes → Lit updates → CSS vars",
      "code": "// hydrate.js\nexport function processBorderColor(fields, merchCard) {\n  merchCard.setAttribute('border-color', fields.borderColor);\n}"
    },
    {
      "id": "aem-mappings",
      "title": "AEM Fragment Mappings",
      "description": "Map AEM fields to component attributes/slots with validation",
      "code": "export const MAPPING = {\n  borderColor: { attribute: 'border-color' }\n};"
    },
    {
      "id": "variant-css",
      "title": "Variant CSS Patterns",
      "description": "Use :host([variant][attr]) selectors for variant-specific styles",
      "code": ":host([variant='ah-try-buy-widget']) {\n  --min-width: 132px;\n}\n:host([border-color]) {\n  border-color: var(--value);\n}"
    },
    {
      "id": "lifecycle-mgmt",
      "title": "Lifecycle Hooks",
      "description": "Implement willUpdate/updated for post-render side effects",
      "code": "updated(changed) {\n  if (changed.has('borderColor')) {\n    this.style.setProperty('--border-color', this.borderColor);\n  }\n}"
    },
    {
      "id": "spectrum-integration",
      "title": "Spectrum Design System",
      "description": "Use --spectrum-* variables for colors/theming",
      "code": "background-color: var(--spectrum-gray-50);"
    }
  ]
} 

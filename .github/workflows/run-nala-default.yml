name: Run Nala Tests

on:
  push:
    branches:
      - stage
      - main
  pull_request:
    branches:
      - stage
      - main
    types: [opened, synchronize, reopened]
  
  workflow_dispatch:
    inputs:
      max_shards:
        description: 'Maximum number of parallel shards (2-10)'
        required: false
        default: '6'
        type: string

jobs:
  # Calculate optimal shard count based on test files
  calculate-shards:
    name: Calculate Test Shards
    runs-on: ubuntu-latest
    outputs:
      shard-count: ${{ steps.calculate.outputs.count }}
      matrix: ${{ steps.calculate.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Calculate optimal shard count
        id: calculate
        run: |
          # Count test files
          TEST_COUNT=$(find nala -name "*.test.js" | wc -l)
          echo "Found $TEST_COUNT test files"
          
          # Get max shards from input (default to 6 for auto runs)
          MAX_SHARDS=${{ inputs.max_shards }}
          MAX_SHARDS=${MAX_SHARDS:-6}
          
          # Calculate optimal shard count (5-8 test files per shard)
          OPTIMAL_SHARDS=$((TEST_COUNT / 6))
          OPTIMAL_SHARDS=$((OPTIMAL_SHARDS < 2 ? 2 : OPTIMAL_SHARDS))
          OPTIMAL_SHARDS=$((OPTIMAL_SHARDS > MAX_SHARDS ? MAX_SHARDS : OPTIMAL_SHARDS))
          
          echo "Using $OPTIMAL_SHARDS shards for $TEST_COUNT test files"
          echo "count=$OPTIMAL_SHARDS" >> $GITHUB_OUTPUT
          
          # Create matrix JSON using printf for better control
          SHARDS_JSON=""
          for i in $(seq 1 $OPTIMAL_SHARDS); do
            if [ $i -eq 1 ]; then
              SHARDS_JSON="$i"
            else
              SHARDS_JSON="$SHARDS_JSON,$i"
            fi
          done
          MATRIX="{\"shard\":[$SHARDS_JSON]}"
          echo "Debug: Generated matrix: $MATRIX"
          printf "matrix=%s\n" "$MATRIX" >> $GITHUB_OUTPUT
          
          # Output summary to workflow
          echo "## Test Sharding Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Test files found:** $TEST_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- **Shards to use:** $OPTIMAL_SHARDS" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests per shard:** ~$((TEST_COUNT / OPTIMAL_SHARDS))" >> $GITHUB_STEP_SUMMARY

  # Build Docker image with dependency caching
  build-test-image:
    name: Build Test Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('package-lock.json', 'package.json') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and cache Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.nala
          tags: milo-nala-tests:latest
          outputs: type=docker,dest=/tmp/milo-nala-tests.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          build-args: |
            PLAYWRIGHT_VERSION=1.54.0

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload Docker image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/milo-nala-tests.tar
          retention-days: 1

  # Parallel test execution using the cached image
  run-nala-tests:
    name: E2E Tests (Shard ${{ matrix.shard }}/${{ needs.calculate-shards.outputs.shard-count }})
    needs: [calculate-shards, build-test-image]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Continue running other shards even if one fails
      matrix: ${{ fromJson(needs.calculate-shards.outputs.matrix) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          fetch-depth: 2

      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load Docker image
        run: |
          docker load --input /tmp/milo-nala-tests.tar
          docker image ls

      - name: Run Nala Tests (Shard ${{ matrix.shard }}/${{ needs.calculate-shards.outputs.shard-count }})
        run: |
          docker run --rm \
            --ipc=host \
            -v ${{ github.workspace }}/nala:/workspace/nala:ro \
            -v ${{ github.workspace }}/test-results:/workspace/test-results \
            -v ${{ github.workspace }}/test-html-results:/workspace/test-html-results \
            -v ${{ github.workspace }}/playwright-report:/workspace/playwright-report \
            -e GITHUB_ACTION_PATH=/workspace \
            -e GITHUB_REF=${{ github.ref }} \
            -e GITHUB_HEAD_REF=${{ github.event.pull_request.head.ref }} \
            -e labels="${{ join(github.event.pull_request.labels.*.name, ' ') }}" \
            -e branch="${{ github.event.pull_request.head.ref }}" \
            -e repoName="${{ github.repository }}" \
            -e prUrl="${{ github.event.pull_request.head.repo.html_url }}" \
            -e prOrg="${{ github.event.pull_request.head.repo.owner.login }}" \
            -e prRepo="${{ github.event.pull_request.head.repo.name }}" \
            -e prBranch="${{ github.event.pull_request.head.ref }}" \
            -e prBaseBranch="${{ github.event.pull_request.base.ref }}" \
            -e IMS_EMAIL="${{ secrets.IMS_EMAIL }}" \
            -e IMS_PASS="${{ secrets.IMS_PASS }}" \
            -e SHARD_INDEX="${{ matrix.shard }}" \
            -e SHARD_TOTAL="${{ needs.calculate-shards.outputs.shard-count }}" \
            milo-nala-tests:latest

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-shard-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
            test-html-results/
            nala-results.json
          retention-days: 7

  # Merge and report combined results
  merge-test-results:
    name: Merge Test Results
    needs: [calculate-shards, run-nala-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683

      - name: Set up Node.js
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e
        with:
          node-version: '20.x'

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: all-shards
          pattern: test-results-shard-*
          merge-multiple: true

      - name: Install merge tools
        run: npm install -g playwright-merge-html-reports

      - name: Merge HTML reports
        run: |
          echo "Merging HTML reports from ${{ needs.calculate-shards.outputs.shard-count }} shards..."
          
          # Find all HTML reports
          REPORT_DIRS=$(find all-shards -name "playwright-report" -type d | tr '\n' ' ')
          
          if [ ! -z "$REPORT_DIRS" ]; then
            npx playwright merge-reports ${REPORT_DIRS} --reporter=html || true
          fi

      - name: Create summary report
        run: |
          echo "## Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total shards:** ${{ needs.calculate-shards.outputs.shard-count }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Count results from each shard
          echo "### Shard Results" >> $GITHUB_STEP_SUMMARY
          for dir in all-shards/test-results-shard-*/; do
            if [ -d "$dir" ]; then
              SHARD_NUM=$(basename "$dir" | sed 's/test-results-shard-//')
              echo "- **Shard $SHARD_NUM:** " >> $GITHUB_STEP_SUMMARY
              
              # Try to extract test counts if available
              if [ -f "$dir/nala-results.json" ]; then
                echo "  ✅ Results collected" >> $GITHUB_STEP_SUMMARY
              else
                echo "  ⚠️ No results file found" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          done
          
          # Performance metrics
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Performance" >> $GITHUB_STEP_SUMMARY
          SHARD_COUNT=${{ needs.calculate-shards.outputs.shard-count }}
          TIME_SAVED=$((($SHARD_COUNT - 1) * 100 / $SHARD_COUNT))
          echo "- **Estimated time reduction:** ~${TIME_SAVED}%" >> $GITHUB_STEP_SUMMARY
          echo "- **Parallelization factor:** ${SHARD_COUNT}x" >> $GITHUB_STEP_SUMMARY

      - name: Upload merged results
        uses: actions/upload-artifact@v4
        with:
          name: merged-playwright-report
          path: |
            playwright-report/
            all-shards/
          retention-days: 30

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        continue-on-error: true
        with:
          script: |
            const shardCount = ${{ needs.calculate-shards.outputs.shard-count }};
            const comment = `## 🎭 E2E Test Results
            
            Tests completed across **${shardCount} parallel runners**
            
            | Status | Details |
            |--------|---------|
            | ✅ Parallelization | ${shardCount} shards |
            | 📊 Reports | [View Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
            | ⏱️ Time Saved | ~${Math.round((shardCount - 1) * 100 / shardCount)}% faster |
            
            [View Full Summary](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

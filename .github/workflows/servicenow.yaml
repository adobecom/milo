name: Create CMR in ServiceNow

on:
  pull_request:
    types:
      - closed
    branches:
      - servicenow-cmr-test

jobs:
  create-cmr:
    # Only run this workflow on pull requests that have merged and not manually closed by user
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell for shell validation
      - name: Validate Shell
        run: echo Starting CMR Action...

      - name: Check Dependencies
        run: |
          if ! type "jq" >/dev/null; then
            echo "jq is required but not installed"
            exit 1
          fi

          if ! type "curl" >/dev/null; then
            echo "curl is required but not installed"
            exit 1
          fi

          echo "Dependencies check was successful"

      - name: Set Maintenance Time Windows for CMR
        run: |
          echo "start_time=$(date -d "+60 minutes" '+%Y-%m-%d %H:%M')" >> $GITHUB_ENV
          echo "end_time=$(date -d "+90 minutes" '+%Y-%m-%d %H:%M')" >> $GITHUB_ENV

      - name: Set Release Summary for CMR
        run: |
          function sanitizeStr() {
            local str=$1

            if [ -z "$str" ]; then
              echo "First parameter missing, must be a valid string"
              return 1
            fi

            str="${str//\"/""}"
            str="${str//\'/""}"
            str="${str//(/"["}"
            str="${str//)/"]"}"
            str="${str//$'\r'/"\r"}"
            str="${str//$'\n'/"\n"}"
            str="${str//$'\t'/"\t"}"
            str="${str//$'\b'/"\b"}"
            str="${str//\\//}"
            str="${str////"\/"}"

            echo "$str"
          }

          release_title=$(sanitizeStr "${{ github.event.pull_request.title }}") >> $GITHUB_ENV
          release_details=$(sanitizeStr "${{ github.event.pull_request.body }}")
          release=Release_Details--"${release_details}"--Pull_Request_Number--"${{ github.event.pull_request.number }}"--Pull_Request_Created_At--"${{ github.event.pull_request.created_at }}"--Pull_Request_Merged_At--"${{ github.event.pull_request.merged_at }}"

          echo "release_summary<<RS_EOF" >> $GITHUB_ENV
          echo "$release" >> $GITHUB_ENV
          echo "RS_EOF" >> $GITHUB_ENV

      - name: Get IMS Token
        run: |
          DEFAULT_IMS_URL='https://ims-na1-stg1.adobelogin.com/ims/token'

          function ims_request() {
            local client_id=${{ secrets.IMSACCESS_CLIENT_ID }}
            local client_secret=${{ secrets.IMSACCESS_CLIENT_SECRET_STAGE }}
            local ims_code=${{ secrets.IMSACCESS_AUTH_CODE_STAGE }}
            local url=$1

            if [ -z "$client_id" ]; then
              echo "Missing IMS client ID"
              return 1
            fi

            if [ -z "$client_secret" ]; then
              echo "Missing IMS client secret"
              return 1
            fi

            if [ -z "$ims_code" ]; then
              echo "Missing IMS Code"
              return 1
            fi

            if [ -z "$url" ]; then
              url=$DEFAULT_IMS_URL
            fi

            local response=$(curl --request POST --write-out "%{http_code}" --silent --output response.txt --url "${url}" --header 'content-type: multipart/form-data' --form client_id=${client_id} --form client_secret=${client_secret} --form grant_type=authorization_code --form code=${ims_code})

            if [ $response != "200" ]; then
              echo "CURL call returned HTTP status code: $response"
              exit 1
            elif grep -q "\"error\"" response.txt; then
              echo "IMS token request failed with response: "
              cat response.txt
              exit 1
            else
              echo "IMS token request was successful"
              token=$(jq -r '.access_token' response.txt) >> GITHUB_ENV
            fi
          }

          ims_request

      - name: Create CMR in ServiceNow
        run: |
          DEFAULT_SERVICENOW_URL='https://ipaasapi-stage.adobe-services.com/change_management/changes'

          function servicenow_create_cmr() {
            local api_key=${{ secrets.IPAAS_KEY_STAGE }}
            local access_token=${{ env.token }}
            local url=$1

            if [ -z "$api_key" ]; then
              echo "Missing ServiceNow API key"
              return 1
            fi

            if [ -z "$access_token" ]; then
              echo "Missing IMS access token"
              return 1
            fi

            if [ -z "$url" ]; then
              url=$DEFAULT_SERVICENOW_URL
            fi

            local response=$(curl --request POST --write-out "%{http_code}" --silent --output response.txt --url "${url}" --header "api_key: ${api_key}" --header "Authorization: ${access_token}" -d '{"title": "${{ env.release_title }}", "description": "${{ env.release_summary }}", "instanceIds": [ 537445 ], "plannedStartDate": ${{ env.start_time }}, "plannedEndDate": ${{ env.end_time }}, "coordinator": "narcis@adobe.com", "executor": "mauchley@adobe.com", "customerImpact": "No Impact", "changeReason": [ "New Features", "Bug Fixes", "Enhancement", "Maintenance", "Security" ], "risk": "Straight Forward", "preProductionTestingType": [ "End-to-End", "Functional", "Integrations", "QA", "Regression", "UAT", "Unit Test" ], "backoutPlanType": "Roll back", "approvedBy": [ "osahin@adobe.com", "cpeyer@adobe.com" ], "testPlan": "Test plan is documented in the PR link in the Milo repository above. See the PR's merge checks to see Unit and Nala testing.", "implementationPlan": "The change will be realeased as part of the continuous deployment of Milo's production branch, i.e., \"main\"", "backoutPlan": "Revert merge to the Milo production branch by creating a revert commit.", "testResults": "Changes are tested and validated successfully in staging environment. Please see the link of the PR in the description for the test results and/or the \"#nala-test-results\" slack channel."}')

            if [ $response != "200" ]; then
              echo "CURL call returned HTTP status code: $response"
              exit 1
            elif grep -q "\"status\":\"error\"" response.txt; then
              echo "CMR creation failed with response: "
              cat response.txt
              exit 1
            else
              echo "CMR creation was successful"
              transaction_id=$(jq -r '.id' response.txt) >> GITHUB_ENV
            fi
          }

          servicenow_create_cmr

      - name: Retrieve CMR ID in ServiceNow
        run: |
          DEFAULT_SERVICENOW_URL='https://ipaasapi-stage.adobe-services.com/change_management/transactions/${{ env.transaction_id }}'

          function servicenow_request_cmr() {
            local api_key=${{ secrets.IPAAS_KEY_STAGE }}
            local access_token=${{ env.token }}
            local url=$1

            if [ -z "$api_key" ]; then
              echo "Missing ServiceNow API key"
              return 1
            fi

            if [ -z "$access_token" ]; then
              echo "Missing IMS access token"
              return 1
            fi

            if [ -z "$url" ]; then
              url=$DEFAULT_SERVICENOW_URL
            fi

            local response=$(curl --request GET --write-out "%{http_code}" --silent --output response.txt --url "${url}" --header "api_key: ${api_key}" --header "Authorization: ${access_token}")

            if [ $response != "200" ]; then
              echo "CURL call returned HTTP status code: $response"
              exit 1
            elif grep -q "\"status\":\"error\"" response.txt; then
              echo "CMR ID retrieval failed with response: "
              cat response.txt
              exit 1
            else
              echo "CMR ID retrieval was successful"
              cmr_id=$(jq -r '.changeId' response.txt) >> GITHUB_ENV
            fi
          }

          servicenow_request_cmr

      - name: Close CMR in ServiceNow
        run: |
          DEFAULT_SERVICENOW_URL='https://ipaasapi-stage.adobe-services.com/change_management/changes/${{ env.cmr_id }}'

          function servicenow_close_cmr() {
            local api_key=${{ secrets.IPAAS_KEY_STAGE }}
            local access_token=${{ env.token }}
            local url=$1

            if [ -z "$api_key" ]; then
              echo "Missing ServiceNow API key"
              return 1
            fi

            if [ -z "$access_token" ]; then
              echo "Missing IMS access token"
              return 1
            fi

            if [ -z "$url" ]; then
              url=$DEFAULT_SERVICENOW_URL
            fi

            local response=$(curl --request POST --write-out "%{http_code}" --silent --output response.txt --url "${url}" --header "api_key: ${api_key}" --header "Authorization: ${access_token}" -d '{"actualStartDate": ${{ env.start_time }}, "actualEndDate": ${{ env.end_time }}, "state": "Closed", "closeCode": "Successful", "notes": "The change request is closed as the change was released successfully"}')

            if [ $response != "200" ]; then
              echo "CURL call returned HTTP status code: $response"
              exit 1
            elif grep -q "\"status\":\"error\"" response.txt; then
              echo "CMR closure failed with response: "
              cat response.txt
              exit 1
            else
              echo "CMR closure was successful"
            fi
          }

          servicenow_close_cmr

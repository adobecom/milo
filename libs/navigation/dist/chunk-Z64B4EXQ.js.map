{
  "version": 3,
  "sources": ["../../features/placeholders.js"],
  "sourcesContent": ["import { customFetch, getConfig } from '../utils/utils.js';\n\nconst fetchedPlaceholders = {};\nwindow.mph = {};\n\nconst getPlaceholdersPath = (config, sheet) => {\n  const path = `${config.locale.contentRoot}/placeholders.json`;\n  const query = sheet !== 'default' && typeof sheet === 'string' && sheet.length ? `?sheet=${sheet}` : '';\n  return `${path}${query}`;\n};\n\nconst fetchPlaceholders = async ({ config, sheet, placeholderRequest, placeholderPath }) => {\n  const path = placeholderPath || getPlaceholdersPath(config, sheet);\n  // eslint-disable-next-line no-async-promise-executor\n  fetchedPlaceholders[path] = fetchedPlaceholders[path] || new Promise(async (resolve) => {\n    const resp = await placeholderRequest || await customFetch(\n      { resource: path, withCacheRules: true },\n    ).catch(() => ({}));\n    const json = resp.ok ? await resp.json() : { data: [] };\n    if (json.data.length === 0) { resolve({}); return; }\n    const placeholders = {};\n    json.data.forEach((item) => {\n      window.mph[item.key] = item.value;\n      placeholders[item.key] = item.value;\n    });\n    resolve(placeholders);\n  });\n  return fetchedPlaceholders[path];\n};\n\nfunction keyToStr(key) {\n  return key.replaceAll('-', ' ');\n}\n\nasync function getPlaceholder(key, config, sheet) {\n  let defaultFetched = false;\n  const defaultLocale = 'en-US';\n\n  const getDefaultContentRoot = () => {\n    const defaultContentRoot = config.locale.contentRoot;\n    const localePrefix = config.locale.prefix;\n\n    if (!localePrefix.length) return defaultContentRoot;\n\n    // Certain locale prefixes are common beginnings of words, such as /es\n    // This could also be part of a page path, such as '/esign'\n    if (defaultContentRoot.endsWith(localePrefix)) {\n      return defaultContentRoot.replace(localePrefix, '');\n    }\n\n    return defaultContentRoot.replace(`${localePrefix}/`, '/');\n  };\n\n  const getDefaultPlaceholders = async () => {\n    const defaultConfig = {\n      locale: {\n        ietf: defaultLocale,\n        contentRoot: getDefaultContentRoot(),\n      },\n    };\n\n    const defaultPlaceholders = await fetchPlaceholders({ config: defaultConfig, sheet })\n      .catch(() => ({}));\n    defaultFetched = true;\n    return defaultPlaceholders;\n  };\n\n  if (config.placeholders?.[key]) return config.placeholders[key];\n\n  const placeholders = await fetchPlaceholders({ config, sheet }).catch(async () => {\n    const defaultPlaceholders = await getDefaultPlaceholders();\n    return defaultPlaceholders;\n  });\n\n  if (typeof placeholders?.[key] === 'string') return placeholders[key];\n\n  if (!defaultFetched && config.locale.ietf !== defaultLocale) {\n    const defaultPlaceholders = await getDefaultPlaceholders();\n    if (defaultPlaceholders?.[key]) return defaultPlaceholders[key];\n  }\n\n  return keyToStr(key);\n}\n\nexport async function replaceKey(key, config, sheet = 'default') {\n  if (typeof key !== 'string' || !key.length) return '';\n\n  const label = await getPlaceholder(key, config, sheet);\n  return label;\n}\n\nexport async function replaceKeyArray(keys, config, sheet = 'default') {\n  if (!Array.isArray(keys) || !keys.length) return [];\n\n  const promiseArr = [];\n  keys.forEach((key) => {\n    promiseArr.push(getPlaceholder(key, config, sheet));\n  });\n\n  const placeholders = await Promise.all(promiseArr);\n  return placeholders;\n}\n\nexport async function replaceText(\n  text,\n  config,\n  regex = /{{(.*?)}}|%7B%7B(.*?)%7D%7D/g,\n  sheet = 'default',\n) {\n  if (typeof text !== 'string' || !text.length) return '';\n\n  const matches = [...text.matchAll(new RegExp(regex))];\n  if (!matches.length) {\n    return text;\n  }\n  const keys = Array.from(matches, (match) => match[1] || match[2]);\n  const placeholders = await replaceKeyArray(keys, config, sheet);\n  // The .shift method is very slow, thus using normal iterator\n  let i = 0;\n  // eslint-disable-next-line no-plusplus\n  let finalText = text.replaceAll(regex, () => placeholders[i++]);\n  finalText = finalText.replace(/&nbsp;/g, '\\u00A0');\n  return finalText;\n}\n\nexport async function decoratePlaceholderArea({\n  placeholderPath,\n  placeholderRequest,\n  nodes,\n}) {\n  if (!nodes.length) return;\n  const config = getConfig();\n  await fetchPlaceholders({ placeholderPath, config, placeholderRequest });\n  const replaceNodes = nodes.map(async (nodeEl) => {\n    if (nodeEl.nodeType === Node.TEXT_NODE) {\n      nodeEl.nodeValue = await replaceText(nodeEl.nodeValue, config);\n    } else if (nodeEl.nodeType === Node.ELEMENT_NODE) {\n      const attrPromises = [...nodeEl.attributes].map(async (attr) => {\n        const attrVal = await replaceText(attr.value, config);\n        return { name: attr.name, value: attrVal };\n      });\n      const results = await Promise.all(attrPromises);\n      results.forEach(({ name, value }) => {\n        nodeEl.setAttribute(name, value);\n      });\n    }\n  });\n  await Promise.all(replaceNodes);\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../blocks/global-navigation/features/breadcrumbs/breadcrumbs.js"],
  "sourcesContent": ["import { getMetadata, getConfig } from '../../../../utils/utils.js';\nimport { toFragment, lanaLog } from '../../utilities/utilities.js';\nimport { getFederatedUrl } from '../../../../utils/federated.js';\n\nconst metadata = {\n  seo: 'breadcrumbs-seo',\n  seoLegacy: 'breadcrumb-seo',\n  fromFile: 'breadcrumbs-from-file',\n  showCurrent: 'breadcrumbs-show-current-page',\n  hiddenEntries: 'breadcrumbs-hidden-entries',\n  pageTitle: 'breadcrumbs-page-title',\n  base: 'breadcrumbs-base',\n  fromUrl: 'breadcrumbs-from-url',\n};\n\nconst setBreadcrumbSEO = (breadcrumbs) => {\n  const seoDisabled = (getMetadata(metadata.seo) || getMetadata(metadata.seoLegacy)) === 'off';\n  if (seoDisabled || !breadcrumbs) return;\n  const breadcrumbsSEO = {\n    '@context': 'https://schema.org',\n    '@type': 'BreadcrumbList',\n    itemListElement: [],\n  };\n  breadcrumbs.querySelectorAll('ul > li').forEach((item, idx) => {\n    const link = item.querySelector('a');\n    breadcrumbsSEO.itemListElement.push({\n      '@type': 'ListItem',\n      position: idx + 1,\n      name: link ? link.innerText.trim() : item.innerText.trim(),\n      item: link?.href,\n    });\n  });\n  const script = toFragment`<script type=\"application/ld+json\">${JSON.stringify(\n    breadcrumbsSEO,\n  )}</script>`;\n  document.head.append(script);\n};\n\nconst createBreadcrumbs = (element) => {\n  if (!element) return null;\n  const ul = element.querySelector('ul');\n  const pageTitle = getMetadata(metadata.pageTitle);\n  if (pageTitle || getMetadata(metadata.showCurrent) === 'on') {\n    ul.append(toFragment`\n      <li>\n        ${pageTitle || document.title}\n      </li>\n    `);\n  }\n\n  const hiddenEntries = getMetadata(metadata.hiddenEntries)\n    ?.toLowerCase()\n    .split(',')\n    .map((item) => item.trim()) || [];\n\n  ul.querySelectorAll('li').forEach((li) => {\n    if (hiddenEntries.includes(li.innerText?.toLowerCase().trim())) li.remove();\n  });\n\n  const breadcrumbs = toFragment`\n    <div class=\"feds-breadcrumbs-wrapper\">\n      <nav class=\"feds-breadcrumbs\" aria-label=\"Breadcrumb\">${ul}</nav>\n    </div>\n  `;\n  ul.querySelector('li:last-of-type')?.setAttribute('aria-current', 'page');\n  return breadcrumbs;\n};\n\nconst createWithBase = async (el) => {\n  const element = el || toFragment`<div><ul></ul></div>`;\n  const url = getFederatedUrl(getMetadata(metadata.base));\n  if (!url) return null;\n  try {\n    const resp = await fetch(`${url}.plain.html`);\n    const text = await resp.text();\n    const base = new DOMParser().parseFromString(text, 'text/html').body;\n    element.querySelector('ul')?.prepend(...base.querySelectorAll('li'));\n    return createBreadcrumbs(element);\n  } catch (e) {\n    lanaLog({ e, message: 'Breadcrumbs failed fetching base', tags: 'errorType=info,module=gnav-breadcrumbs' });\n    return null;\n  }\n};\n\nconst fromUrl = () => {\n  if (getMetadata(metadata.fromUrl) !== 'on') return null;\n  const list = toFragment`<ul></ul>`;\n  const paths = document.location.pathname\n    .replace((getConfig().locale?.prefix || ''), '')\n    .split('/')\n    .filter((n) => n);\n\n  for (let i = 0; i < paths.length; i += 1) {\n    list.append(toFragment`\n      <li>\n        <a href=\"/${paths.slice(0, i + 1).join('/')}\">${paths[i].replaceAll('-', ' ')}</a>\n      </li>\n    `);\n  }\n  return createBreadcrumbs(toFragment`<div>${list}</div>`);\n};\n\nexport default async function init(el) {\n  try {\n    const breadcrumbsEl = await createWithBase(el) || createBreadcrumbs(el) || fromUrl();\n    setBreadcrumbSEO(breadcrumbsEl);\n    return breadcrumbsEl;\n  } catch (e) {\n    lanaLog({ e, message: 'Breadcrumbs failed rendering', tags: 'errorType=error,module=gnav-breadcrumbs' });\n    return null;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}

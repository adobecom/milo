{
  "version": 3,
  "sources": ["../../blocks/fragment/fragment.js"],
  "sourcesContent": ["/* eslint-disable max-classes-per-file */\nimport { createTag, getConfig, loadArea, localizeLink, customFetch } from '../../utils/utils.js';\n\nconst fragMap = {};\n\nconst removeHash = (url) => {\n  const urlNoHash = url.split('#')[0];\n  return url.includes('#_dnt') ? `${urlNoHash}#_dnt` : urlNoHash;\n};\n\nconst isCircularRef = (href) => [...Object.values(fragMap)]\n  .some((tree) => {\n    const node = tree.find(href);\n    return node?.isRecursive;\n  });\n\nconst updateFragMap = (fragment, a, href) => {\n  const fragLinks = [...fragment.querySelectorAll('a')]\n    .filter((link) => localizeLink(link.href).includes('/fragments/'));\n  if (!fragLinks.length) return;\n\n  if (document.body.contains(a) && !a.parentElement?.closest('.fragment')) {\n    // eslint-disable-next-line no-use-before-define\n    fragMap[href] = new Tree(href);\n    fragLinks.forEach((link) => fragMap[href].insert(href, localizeLink(removeHash(link.href))));\n  } else {\n    Object.values(fragMap).forEach((tree) => {\n      const hrefNode = tree.find(href);\n      if (!hrefNode) return;\n\n      fragLinks.forEach((link) => {\n        const localizedHref = localizeLink(removeHash(link.href));\n        const parentNodeSameHref = hrefNode.findParent(localizedHref);\n        if (parentNodeSameHref) {\n          parentNodeSameHref.isRecursive = true;\n        } else {\n          hrefNode.addChild(localizedHref);\n        }\n      });\n    });\n  }\n};\n\nconst insertInlineFrag = (sections, a, relHref) => {\n  // Inline fragments only support one section, other sections are ignored\n  const fragChildren = [...sections[0].children];\n  if (a.parentElement.nodeName === 'DIV' && !a.parentElement.attributes.length) {\n    a.parentElement.replaceWith(...fragChildren);\n  } else {\n    a.replaceWith(...fragChildren);\n  }\n  fragChildren.forEach((child) => child.setAttribute('data-path', relHref));\n};\n\nfunction replaceDotMedia(path, doc) {\n  const resetAttributeBase = (tag, attr) => {\n    doc.querySelectorAll(`${tag}[${attr}^=\"./media_\"]`).forEach((el) => {\n      el[attr] = new URL(el.getAttribute(attr), new URL(path, window.location)).href;\n    });\n  };\n  resetAttributeBase('img', 'src');\n  resetAttributeBase('source', 'srcset');\n}\n\nexport default async function init(a) {\n  const { decorateArea, mep } = getConfig();\n  let relHref = localizeLink(a.href);\n  let inline = false;\n\n  if (a.parentElement?.nodeName === 'P') {\n    const children = a.parentElement.childNodes;\n    const div = createTag('div');\n    for (const attr of a.parentElement.attributes) div.setAttribute(attr.name, attr.value);\n    a.parentElement.replaceWith(div);\n    div.append(...children);\n  }\n\n  if (a.href.includes('#_inline')) {\n    inline = true;\n    a.href = a.href.replace('#_inline', '');\n    relHref = relHref.replace('#_inline', '');\n  }\n\n  const path = new URL(a.href).pathname;\n  if (mep?.fragments?.[path]) {\n    const { handleFragmentCommand } = await import('../../features/personalization/personalization.js');\n    relHref = handleFragmentCommand(mep?.fragments[path], a);\n    if (!relHref) return;\n  }\n\n  if (isCircularRef(relHref)) {\n    window.lana?.log(`ERROR: Fragment Circular Reference loading ${a.href}`);\n    return;\n  }\n\n  let resourcePath = a.href;\n  if (a.href.includes('/federal/')) {\n    const { getFederatedUrl } = await import('../../utils/federated.js');\n    resourcePath = getFederatedUrl(a.href);\n  }\n  const resp = await customFetch({ resource: `${resourcePath}.plain.html`, withCacheRules: true })\n    .catch(() => ({}));\n\n  if (!resp?.ok) {\n    window.lana?.log(`Could not get fragment: ${resourcePath}.plain.html`);\n    return;\n  }\n\n  const html = await resp.text();\n  const doc = new DOMParser().parseFromString(html, 'text/html');\n  replaceDotMedia(a.href, doc);\n  if (decorateArea) decorateArea(doc, { fragmentLink: a });\n\n  const sections = doc.querySelectorAll('body > div');\n\n  if (!sections.length) {\n    window.lana?.log(`Could not make fragment: ${resourcePath}.plain.html`);\n    return;\n  }\n\n  const fragment = createTag('div', { class: 'fragment', 'data-path': relHref });\n\n  if (!inline) {\n    fragment.append(...sections);\n  }\n\n  updateFragMap(fragment, a, relHref);\n  if (a.dataset.manifestId || a.dataset.adobeTargetTestid) {\n    const { updateFragDataProps } = await import('../../features/personalization/personalization.js');\n    updateFragDataProps(a, inline, sections, fragment);\n  }\n  if (mep?.commands?.length) {\n    const { handleCommands } = await import('../../features/personalization/personalization.js');\n    handleCommands(mep?.commands, fragment, false, true);\n  }\n  if (inline) {\n    insertInlineFrag(sections, a, relHref, mep);\n  } else {\n    a.parentElement.replaceChild(fragment, a);\n    await loadArea(fragment);\n  }\n}\n\nclass Node {\n  constructor(key, value = key, parent = null) {\n    this.key = key;\n    this.value = value;\n    this.parent = parent;\n    this.children = [];\n    this.isRecursive = false;\n  }\n\n  addChild(key, value = key) {\n    const alreadyHasChild = this.children.some((n) => n.key === key);\n    if (!alreadyHasChild) {\n      this.children.push(new Node(key, value, this));\n    }\n  }\n\n  findParent(key) {\n    if (this.parent?.key === key) return this.parent;\n    return this.parent?.findParent(key);\n  }\n}\n\nexport class Tree {\n  constructor(key, value = key) {\n    this.root = new Node(key, value);\n  }\n\n  * traverse(node = this.root) {\n    yield node;\n    if (node.children.length) {\n      for (const child of node.children) {\n        yield* this.traverse(child);\n      }\n    }\n  }\n\n  insert(parentNodeKey, key, value = key) {\n    for (const node of this.traverse()) {\n      if (node.key === parentNodeKey) {\n        node.children.push(new Node(key, value, node));\n        return true;\n      }\n    }\n    return false;\n  }\n\n  remove(key) {\n    for (const node of this.traverse()) {\n      const filtered = node.children.filter((c) => c.key !== key);\n      if (filtered.length !== node.children.length) {\n        node.children = filtered;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  find(key) {\n    for (const node of this.traverse()) {\n      if (node.key === key) return node;\n    }\n    return undefined;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}

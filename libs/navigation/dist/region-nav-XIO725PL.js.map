{
  "version": 3,
  "sources": ["../../blocks/region-nav/region-nav.js"],
  "sourcesContent": ["import { getConfig } from '../../utils/utils.js';\n\nfunction setInternational(prefix) {\n  const domain = window.location.host.endsWith('.adobe.com') ? 'domain=adobe.com' : '';\n  const maxAge = 365 * 24 * 60 * 60; // max-age in seconds for 365 days\n  document.cookie = `international=${prefix};max-age=${maxAge};path=/;${domain}`;\n  sessionStorage.setItem('international', prefix);\n}\n\nfunction handleEvent({ prefix, link, callback } = {}) {\n  if (typeof callback !== 'function') return;\n\n  fetch(link.href, { method: 'HEAD' }).then((resp) => {\n    if (!resp.ok) throw new Error('request failed');\n    callback(link.href);\n  }).catch(() => {\n    const prefixUrl = prefix ? `/${prefix}` : '';\n    callback(`${prefixUrl}/`);\n  });\n}\n\nfunction decorateLink(link, path) {\n  let hrefAdapted;\n  let pathname = link.getAttribute('href');\n  if (pathname.startsWith('http')) {\n    try { pathname = new URL(pathname).pathname; } catch (e) { /* href does not contain domain */ }\n  }\n  const linkParts = pathname.split('/');\n  const prefix = linkParts[1] || 'us';\n  let { href } = link;\n  if (href.endsWith('/')) href = href.slice(0, -1);\n  link.href = `${href}${path}`;\n\n  link.addEventListener('mouseover', () => {\n    setTimeout(() => {\n      if (link.matches(':hover') && !hrefAdapted) {\n        handleEvent({\n          prefix,\n          link,\n          callback: (newHref) => {\n            link.href = newHref;\n            hrefAdapted = true;\n          },\n        });\n      }\n    }, 100);\n  });\n\n  link.addEventListener('click', (e) => {\n    setInternational(prefix);\n    if (hrefAdapted) return;\n    e.preventDefault();\n    handleEvent({\n      prefix,\n      link,\n      callback: (newHref) => {\n        window.open(newHref, e.ctrlKey || e.metaKey ? '_blank' : '_self');\n      },\n    });\n  });\n}\n\nexport default function init(block) {\n  const config = getConfig();\n  const divs = block.querySelectorAll(':scope > div');\n  if (divs.length < 2) return;\n  const links = divs[1].querySelectorAll('a');\n  if (!links.length) return;\n  const { prefix } = config.locale;\n  const path = window.location.href.replace(`${window.location.origin}${prefix}`, '').replace('#langnav', '');\n  links.forEach((link) => decorateLink(link, path));\n}\n"],
  "mappings": ";;;;;;AAEA,SAAS,iBAAiB,QAAQ;AAChC,QAAM,SAAS,OAAO,SAAS,KAAK,SAAS,YAAY,IAAI,qBAAqB;AAClF,QAAM,SAAS,MAAM,KAAK,KAAK;AAC/B,WAAS,SAAS,iBAAiB,MAAM,YAAY,MAAM,WAAW,MAAM;AAC5E,iBAAe,QAAQ,iBAAiB,MAAM;AAChD;AAEA,SAAS,YAAY,EAAE,QAAQ,MAAM,SAAS,IAAI,CAAC,GAAG;AACpD,MAAI,OAAO,aAAa,WAAY;AAEpC,QAAM,KAAK,MAAM,EAAE,QAAQ,OAAO,CAAC,EAAE,KAAK,CAAC,SAAS;AAClD,QAAI,CAAC,KAAK,GAAI,OAAM,IAAI,MAAM,gBAAgB;AAC9C,aAAS,KAAK,IAAI;AAAA,EACpB,CAAC,EAAE,MAAM,MAAM;AACb,UAAM,YAAY,SAAS,IAAI,MAAM,KAAK;AAC1C,aAAS,GAAG,SAAS,GAAG;AAAA,EAC1B,CAAC;AACH;AAEA,SAAS,aAAa,MAAM,MAAM;AAChC,MAAI;AACJ,MAAI,WAAW,KAAK,aAAa,MAAM;AACvC,MAAI,SAAS,WAAW,MAAM,GAAG;AAC/B,QAAI;AAAE,iBAAW,IAAI,IAAI,QAAQ,EAAE;AAAA,IAAU,SAAS,GAAG;AAAA,IAAqC;AAAA,EAChG;AACA,QAAM,YAAY,SAAS,MAAM,GAAG;AACpC,QAAM,SAAS,UAAU,CAAC,KAAK;AAC/B,MAAI,EAAE,KAAK,IAAI;AACf,MAAI,KAAK,SAAS,GAAG,EAAG,QAAO,KAAK,MAAM,GAAG,EAAE;AAC/C,OAAK,OAAO,GAAG,IAAI,GAAG,IAAI;AAE1B,OAAK,iBAAiB,aAAa,MAAM;AACvC,eAAW,MAAM;AACf,UAAI,KAAK,QAAQ,QAAQ,KAAK,CAAC,aAAa;AAC1C,oBAAY;AAAA,UACV;AAAA,UACA;AAAA,UACA,UAAU,CAAC,YAAY;AACrB,iBAAK,OAAO;AACZ,0BAAc;AAAA,UAChB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,GAAG,GAAG;AAAA,EACR,CAAC;AAED,OAAK,iBAAiB,SAAS,CAAC,MAAM;AACpC,qBAAiB,MAAM;AACvB,QAAI,YAAa;AACjB,MAAE,eAAe;AACjB,gBAAY;AAAA,MACV;AAAA,MACA;AAAA,MACA,UAAU,CAAC,YAAY;AACrB,eAAO,KAAK,SAAS,EAAE,WAAW,EAAE,UAAU,WAAW,OAAO;AAAA,MAClE;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;AAEe,SAAR,KAAsB,OAAO;AAClC,QAAM,SAAS,UAAU;AACzB,QAAM,OAAO,MAAM,iBAAiB,cAAc;AAClD,MAAI,KAAK,SAAS,EAAG;AACrB,QAAM,QAAQ,KAAK,CAAC,EAAE,iBAAiB,GAAG;AAC1C,MAAI,CAAC,MAAM,OAAQ;AACnB,QAAM,EAAE,OAAO,IAAI,OAAO;AAC1B,QAAM,OAAO,OAAO,SAAS,KAAK,QAAQ,GAAG,OAAO,SAAS,MAAM,GAAG,MAAM,IAAI,EAAE,EAAE,QAAQ,YAAY,EAAE;AAC1G,QAAM,QAAQ,CAAC,SAAS,aAAa,MAAM,IAAI,CAAC;AAClD;",
  "names": []
}

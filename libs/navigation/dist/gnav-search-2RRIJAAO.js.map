{
  "version": 3,
  "sources": ["../../blocks/global-navigation/features/search/gnav-search.js"],
  "sourcesContent": ["import {\n  toFragment,\n  getFedsPlaceholderConfig,\n  isDesktop,\n  setCurtainState,\n  trigger,\n  closeAllDropdowns,\n  logErrorFor,\n} from '../../utilities/utilities.js';\nimport { replaceKeyArray } from '../../../../features/placeholders.js';\nimport { getConfig } from '../../../../utils/utils.js';\nimport { debounce } from '../../../../utils/action.js';\n\nconst CONFIG = {\n  suggestions: {\n    scope: 'adobecom',\n    apiKey: 'adobedotcom2',\n  },\n  selectors: {\n    hasResults: 'has-results',\n    inputIsPopulated: 'feds-search-input--isPopulated',\n  },\n};\n\nconst { locale } = getConfig();\nconst [, country = 'US'] = locale.ietf.split('-');\n\nclass Search {\n  constructor(config) {\n    this.icon = config.icon;\n    this.trigger = config.trigger;\n    this.parent = this.trigger.closest('.feds-nav-wrapper');\n    const observer = new MutationObserver(() => {\n      this.clearSearchForm();\n    });\n    observer.observe(this.trigger, { attributeFilter: ['aria-expanded'] });\n    logErrorFor(this.init.bind(this), 'Search init has failed', 'errorType=error,module=gnav-search');\n  }\n\n  async init() {\n    await this.getLabels();\n    this.decorate();\n    this.addEventListeners();\n    this.toggleDropdown();\n  }\n\n  async getLabels() {\n    this.labels = {};\n    [this.labels.search, this.labels.clearResults, this.labels.tryAdvancedSearch] = await replaceKeyArray(['search', 'clear-results', 'try-advanced-search'], getFedsPlaceholderConfig());\n  }\n\n  decorate() {\n    this.input = toFragment`<input placeholder=\"${this.labels.search}\" aria-label=\"${this.labels.search}\" class=\"feds-search-input\" autocomplete=\"off\" aria-autocomplete=\"list\" aria-controls=\"feds-search-results\" daa-ll=\"search-results:standard search\" />`;\n    this.resultsList = toFragment`<ul class=\"feds-search-results\" id=\"feds-search-results\" role=\"region\" daa-ll=\"search-results:suggested-search:click\"></ul>`;\n    this.clearButton = toFragment`<button tabindex=\"0\" class=\"feds-search-clear\" aria-label=\"${this.labels.clearResults}\"></button>`;\n    this.searchBar = toFragment`\n      <aside class=\"feds-search-dropdown\">\n        <div class=\"feds-search-bar\">\n          <div class=\"feds-search-field\">\n            ${this.input}\n            <div class=\"feds-search-icons\">\n              ${this.icon}\n              ${this.clearButton}\n            </div>\n          </div>\n          ${this.resultsList}\n        </div>\n      </aside>`;\n\n    this.trigger.after(this.searchBar);\n  }\n\n  clearSearchForm() {\n    this.input.value = '';\n    this.onSearchInput();\n  }\n\n  addEventListeners() {\n    // Toggle the dropdown when the trigger is clicked\n    this.trigger.addEventListener('click', () => {\n      this.toggleDropdown();\n    });\n\n    this.input.addEventListener('input', () => {\n      this.onSearchInput();\n    });\n\n    this.input.addEventListener('keydown', (e) => {\n      if (e.code === 'Escape') {\n        // Pressing ESC when input has value resets the results\n        if (this.input.value.length) {\n          this.clearSearchForm();\n        } else if (isDesktop.matches) {\n          closeAllDropdowns();\n          this.trigger.focus();\n        }\n      }\n\n      if (e.code === 'Enter') {\n        if (!this.query) return;\n        window.location.href = Search.getHelpxLink(this.query);\n      }\n    });\n\n    // If a search result is focused, return focus to input when ESC is pressed\n    this.resultsList.addEventListener('keydown', (e) => {\n      if (e.code === 'Escape') {\n        this.input.focus();\n      }\n    });\n\n    // Clicking the clear button resets the results\n    this.clearButton.addEventListener('click', () => {\n      this.clearSearchForm();\n      this.input.focus();\n    });\n\n    // Switching between a mobile and a desktop view\n    // should close the search dropdown\n    isDesktop.addEventListener('change', () => {\n      closeAllDropdowns();\n    });\n  }\n\n  getSuggestions(query = this.query) {\n    const { env } = getConfig();\n    const subdomain = env === 'prod' ? 'adobesearch' : 'adobesearch-stage';\n    const api = `https://${subdomain}.adobe.io/autocomplete/completions?q[locale]=${locale.ietf}&scope=${CONFIG.suggestions.scope}&q[text]=${encodeURIComponent(query)}`;\n\n    return fetch(api, { headers: { 'x-api-key': CONFIG.suggestions.apiKey } })\n      .then((data) => data.json())\n      .catch(() => {\n        // do nothing\n      });\n  }\n\n  onSearchInput = debounce(() => {\n    const query = this.getQuery();\n\n    if (!query.length) {\n      this.resultsList.replaceChildren();\n      delete this.query;\n      return;\n    }\n\n    // Avoid successive calls for the same input value\n    if (query === this.query) {\n      return;\n    }\n\n    this.query = query;\n\n    this.getSuggestions()\n      .then((data) => {\n        const suggestions = data?.suggested_completions;\n\n        if (!Array.isArray(suggestions)\n          || !suggestions.length) {\n          this.resultsList.replaceChildren(this.getNoResultsTemplate());\n          if (this.parent instanceof HTMLElement) {\n            this.parent.classList.remove(CONFIG.selectors.hasResults);\n          }\n          return;\n        }\n\n        this.resultsList.replaceChildren(this.getResultsTemplate(suggestions));\n        if (this.parent instanceof HTMLElement) {\n          this.parent.classList.add(CONFIG.selectors.hasResults);\n        }\n      })\n      .catch(() => {\n        this.resultsList.replaceChildren(this.getNoResultsTemplate());\n        if (this.parent instanceof HTMLElement) {\n          this.parent.classList.remove(CONFIG.selectors.hasResults);\n        }\n      });\n  }, 150);\n\n  getQuery() {\n    const query = this.input.value.trim();\n\n    if (!query.length) {\n      this.input.classList.remove(CONFIG.selectors.inputIsPopulated);\n      this.resultsList.replaceChildren();\n      if (this.parent instanceof HTMLElement) {\n        this.parent.classList.remove(CONFIG.selectors.hasResults);\n      }\n      return '';\n    }\n\n    this.input.classList.add(CONFIG.selectors.inputIsPopulated);\n\n    return query;\n  }\n\n  getResultsTemplate(results) {\n    const resultsTemplate = document.createDocumentFragment();\n\n    // eslint-disable-next-line array-callback-return\n    results.map((result) => {\n      const resultLabel = result.name;\n\n      if (!resultLabel.length) {\n        return;\n      }\n\n      // A longest common substring match between the original prefix and suggestion must be made\n      // for cases when special characters are used. Say the user searches for 'pho-',\n      // then the prefix will be 'pho-', while the suggestion will be 'photoshop'.\n      // The generated suggestion markup should look like `<b>pho</b>toshop`,\n      // so we need to extract the part of the prefix that matches the current suggestion\n      const matchPrefixToSuggestion = () => {\n        let i = 0;\n        const prefixLength = this.query.length;\n\n        while (i < prefixLength && this.query[i].toLowerCase() === resultLabel[i].toLowerCase()) {\n          i += 1;\n        }\n\n        return this.query.substring(0, i).trim();\n      };\n\n      // The matched prefix can't be cached to be used for all of the suggestions in the set\n      // because there are edge cases when there are significant differences between suggestions.\n      // For example, the query 'max 20' will yield the suggestions 'max 2016' and 'maximize',\n      // thus the common part between the query and the suggestion differs:\n      // * 'max 20' for the first suggestion\n      // * 'max' for the second suggestion\n      const matchedPrefix = matchPrefixToSuggestion();\n\n      // Say the user searched for 'PhOtOsHoP' and the suggested result is 'Photoshop Trial';\n      // We don't want the suggestion to be rendered as '<b>PhOtOsHoP</b> Trial',\n      // rather '<b>Photoshop</b> Trial', like the original suggestion formatting.\n      // First, define a capturing group Regexp;\n      // in the example above this will be '/(PhOtOsHoP)/i'\n      const prefixPattern = new RegExp(`(${matchedPrefix})`, 'i');\n      let suggestionPrefix;\n      // Remove the query from the suggestion and\n      // save the matched prefix in its original formatting from the API\n      const suggestionWithoutPrefix = resultLabel.replace(prefixPattern, (match) => {\n        // Save the matched string (with the formatting suggested by the API) into a variable\n        suggestionPrefix = match;\n        // Remove the matched string\n        return '';\n      });\n\n      const resultTemplate = toFragment`<li>\n          <a href=\"${Search.getHelpxLink(resultLabel)}\" class=\"feds-search-result\" aria-label=\"${resultLabel}\">\n            <span>${suggestionPrefix}</span>${suggestionWithoutPrefix}\n          </a>\n        </li>`;\n\n      resultsTemplate.appendChild(resultTemplate);\n    });\n\n    return resultsTemplate;\n  }\n\n  getNoResultsTemplate(query = this.query) {\n    return toFragment`<li>\n      <a href=\"${Search.getHelpxLink(query)}\" class=\"feds-search-result\"><span>${this.labels.tryAdvancedSearch}</span></a>\n    </li>`;\n  }\n\n  focusInput() {\n    if (isDesktop.matches) {\n      this.input.focus();\n    }\n  }\n\n  toggleDropdown() {\n    if (!isDesktop.matches) return;\n\n    const hasBeenOpened = trigger({ element: this.trigger });\n    if (hasBeenOpened) {\n      setCurtainState(true);\n      this.focusInput();\n    } else {\n      this.clearSearchForm();\n    }\n  }\n\n  static getHelpxLink(query) {\n    return `https://helpx.adobe.com${locale.prefix}/globalsearch.html?q=${encodeURIComponent((query || '').trim())}&start_index=0&country=${country}`;\n  }\n}\n\nexport default Search;\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../../features/japanese-word-wrap.js"],
  "sourcesContent": ["/* eslint-disable no-console */\nimport { getMetadata } from '../utils/utils.js';\n\nconst hasTextNode = (element) => [...element.childNodes]\n  .some(({ nodeType, textContent }) => nodeType === Node.TEXT_NODE && textContent.trim() !== '');\n\nfunction findTextElements(element = document.body) {\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'header' || tagName === 'footer'\n    || element.classList.contains('jpwordwrap-disabled')\n  ) {\n    return [];\n  }\n\n  return Array.from(element.children).reduce((result, child) => (\n    hasTextNode(child)\n      ? [...result, child]\n      : [...result, ...findTextElements(child)]\n  ), []);\n}\n\n/**\n * Update the model to control line breaks occurring for the specified word.\n */\nfunction updateParserModel(parser, pattern, score, markerSymbol = '#') {\n  const markerPos = pattern.indexOf(markerSymbol);\n  if (markerPos === -1) {\n    console.warn('No marker symbol found in the line break pattern string');\n    return;\n  }\n\n  if (markerPos !== pattern.lastIndexOf('#')) {\n    console.warn('Two or more marker symbols cannot be specified. Only the first marker is applied');\n  }\n\n  const former = pattern.slice(Math.max(markerPos - 3, 0), markerPos);\n  const latter = pattern.slice(markerPos + 1, Math.min(markerPos + 4, pattern.length));\n\n  if (former.length < 2 || latter.length < 2) {\n    console.warn('At least two characters must be specified before and after the marker symbol');\n    return;\n  }\n\n  if (former.length === 3) {\n    parser.model.set(`TW1:${former}`, score);\n  } else if (former.length === 2) {\n    parser.model.set(`BW1:${former}`, score);\n  }\n\n  if (latter.length === 3) {\n    parser.model.set(`TW4:${latter}`, score);\n  } else if (latter.length === 2) {\n    parser.model.set(`BW3:${latter}`, score);\n  }\n}\n\nfunction hasFlexOrGrid(element) {\n  const elStyles = getComputedStyle(element);\n\n  return (elStyles.display === 'flex' || elStyles.display === 'grid');\n}\n\nfunction isFirefox() {\n  return navigator.userAgent.includes('Firefox');\n}\n\n/**\n * Check if a word wrap has been applied to an element.\n */\nexport function isWordWrapApplied(element) {\n  return !!element.querySelector('wbr');\n}\n\n/**\n * Check if a balanced word wrap has been applied to an element.\n */\nexport function isBalancedWordWrapApplied(element) {\n  return !!element.querySelector('wbr[class^=jpn-balanced-wbr]');\n}\n\n/**\n * Apply smart line-breaking algorithm depending on the given options.\n */\nexport async function applyJapaneseLineBreaks(config, options = {}) {\n  const { miloLibs, codeRoot } = config;\n  const {\n    scopeArea = document,\n    budouxThres = 2000,\n    bwEnabled = false,\n    budouxExcludeSelector = null,\n    bwExcludeSelector = 'p',\n    lineBreakOkPatterns = [],\n    lineBreakNgPatterns = [],\n  } = options;\n  const base = miloLibs || codeRoot;\n\n  // The thresould value to control word break granularity for long semantic blocks.\n  const { loadDefaultJapaneseParser } = await import(`${base}/deps/budoux-index-ja.min.js`);\n  const parser = loadDefaultJapaneseParser();\n\n  // Find elements that contains a text node directly under its child node.\n  const textElements = findTextElements(\n    scopeArea instanceof Document ? scopeArea.body : scopeArea,\n  );\n  const budouxExcludeElements = new Set();\n  const bwExcludeElements = new Set();\n\n  // Find BudouX disabled elements\n  if (budouxExcludeSelector) {\n    scopeArea.querySelectorAll(budouxExcludeSelector).forEach((el) => {\n      budouxExcludeElements.add(el);\n    });\n  }\n\n  // Find Blanced Word Wrap disabled elements\n  if (bwEnabled && bwExcludeSelector) {\n    scopeArea.querySelectorAll(bwExcludeSelector).forEach((el) => {\n      bwExcludeElements.add(el);\n    });\n  }\n\n  // Update model based on given patterns\n  const SCORE = Number.MAX_VALUE;\n  lineBreakOkPatterns.forEach((p) => {\n    updateParserModel(parser, p, SCORE);\n  });\n  lineBreakNgPatterns.forEach((p) => {\n    updateParserModel(parser, p, -SCORE);\n  });\n\n  // Apply budoux to target selector\n  textElements.forEach((el) => {\n    if (\n      budouxExcludeElements.has(el)\n      || isWordWrapApplied(el)\n      || (isFirefox() && hasFlexOrGrid(el))\n    ) return;\n    parser.applyElement(el, { threshold: budouxThres });\n  });\n\n  if (bwEnabled) {\n    const BalancedWordWrapper = (await import(`${base}/deps/bw2.min.js`)).default;\n    const bw2 = new BalancedWordWrapper();\n    // Apply balanced word wrap to target selector\n    textElements.forEach((el) => {\n      if (\n        bwExcludeElements.has(el)\n        || isBalancedWordWrapApplied(el)\n        || (isFirefox() && hasFlexOrGrid(el))\n      ) return;\n      bw2.applyElement(el);\n    });\n  }\n}\n\n/**\n * Apply smart line-breaking algorithm by inserting <wbr> between semantic blocks.\n * This allows browsers to break japanese sentences correctly.\n */\nexport default async function controlJapaneseLineBreaks(config, scopeArea = document) {\n  const disabled = getMetadata('jpwordwrap:disabled') === 'true' || false;\n  const budouxThres = Number(getMetadata('jpwordwrap:budoux-thres')) || 2000;\n  const budouxExcludeSelector = getMetadata('jpwordwrap:budoux-exclude-selector');\n  const bwEnabled = getMetadata('jpwordwrap:bw-enabled') === 'true' || false;\n  const bwExcludeSelector = getMetadata('jpwordwrap:bw-exclude-selector') || 'p';\n  const lineBreakOkPatterns = (getMetadata('jpwordwrap:line-break-ok') || '').split(',');\n  const lineBreakNgPatterns = (getMetadata('jpwordwrap:line-break-ng') || '').split(',');\n\n  if (disabled) return;\n\n  await applyJapaneseLineBreaks(config, {\n    scopeArea,\n    budouxThres,\n    budouxExcludeSelector,\n    bwEnabled,\n    bwExcludeSelector,\n    lineBreakOkPatterns,\n    lineBreakNgPatterns,\n  });\n}\n"],
  "mappings": "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",
  "names": []
}

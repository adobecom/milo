{
  "version": 3,
  "sources": ["../../features/mas/src/sidenav/merch-sidenav.js", "../../features/mas/node_modules/@spectrum-web-components/reactive-controllers/src/MatchMedia.ts", "../../features/mas/src/sidenav/merch-sidenav-heading.css.js", "../../features/mas/src/merch-search.js", "../../features/mas/src/utils.js", "../../features/mas/src/constants.js", "../../features/mas/src/deeplink.js", "../../features/mas/src/sidenav/merch-sidenav-list.js", "../../features/mas/src/sidenav/merch-sidenav-checkbox-group.js", "../../features/mas/src/media.js", "../../features/mas/src/bodyScrollLock.js"],
  "sourcesContent": ["import { html, css, LitElement } from 'lit';\nimport { MatchMediaController } from '@spectrum-web-components/reactive-controllers/src/MatchMedia.js';\nimport { headingStyles } from './merch-sidenav-heading.css.js';\nimport '../merch-search.js';\nimport './merch-sidenav-list.js';\nimport './merch-sidenav-checkbox-group.js';\nimport { SPECTRUM_MOBILE_LANDSCAPE, TABLET_DOWN } from '../media.js';\nimport { disableBodyScroll, enableBodyScroll } from '../bodyScrollLock.js';\n\nexport class MerchSideNav extends LitElement {\n    static properties = {\n        sidenavTitle: { type: String },\n        closeText: { type: String, attribute: 'close-text' },\n        modal: { type: Boolean, attribute: 'modal', reflect: true },\n    };\n\n    // modal target\n    #target;\n\n    constructor() {\n        super();\n        this.modal = false;\n    }\n\n    static styles = [\n        css`\n            :host {\n                display: block;\n                z-index: 2;\n            }\n\n            :host(:not([modal])) {\n                --mod-sidenav-item-background-default-selected: #222;\n                --mod-sidenav-content-color-default-selected: #fff;\n            }\n\n            #content {\n                width: 100%;\n                min-width: 300px;\n                height: 100%;\n                display: flex;\n                justify-content: center;\n                align-items: baseline;\n            }\n\n            :host([modal]) ::slotted(merch-search) {\n                display: none;\n            }\n\n            #sidenav {\n                display: flex;\n                flex-direction: column;\n                max-width: 248px;\n                overflow-y: auto;\n                place-items: center;\n                position: relative;\n                width: 100%;\n                padding-bottom: 16px;\n            }\n\n            sp-dialog-base #sidenav {\n                padding-top: 16px;\n                max-width: 300px;\n                max-height: 80dvh;\n                min-height: min(500px, 80dvh);\n                background: #ffffff 0% 0% no-repeat padding-box;\n                box-shadow: 0px 1px 4px #00000026;\n            }\n\n            sp-link {\n                position: absolute;\n                top: 16px;\n                right: 16px;\n            }\n        `,\n        headingStyles,\n    ];\n\n    mobileDevice = new MatchMediaController(this, SPECTRUM_MOBILE_LANDSCAPE);\n    mobileAndTablet = new MatchMediaController(this, TABLET_DOWN);\n\n    get filters() {\n        return this.querySelector('merch-sidenav-list');\n    }\n\n    get search() {\n        return this.querySelector('merch-search');\n    }\n\n    render() {\n        return this.mobileAndTablet.matches ? this.asDialog : this.asAside;\n    }\n\n    get asDialog() {\n        if (!this.modal) return;\n        return html`\n            <sp-theme  color=\"light\" scale=\"medium\">\n                <sp-dialog-base\n                    slot=\"click-content\"\n                    dismissable\n                    underlay\n                    no-divider\n                >\n                    <div id=\"content\">\n                        <div id=\"sidenav\">\n                            <div>\n                                <h2>${this.sidenavTitle}</h2>\n                                <slot></slot>\n                            </div>\n                            <sp-link href=\"#\" @click=\"${this.closeModal}\"\n                                >${this.closeText || 'Close'}</sp-link\n                            >\n                        </div>\n                    </div>\n                </sp-dialog-base>\n            </sp-theme>\n        `;\n    }\n\n    get asAside() {\n        return html`<sp-theme  color=\"light\" scale=\"medium\"\n            ><h2>${this.sidenavTitle}</h2>\n            <slot></slot\n        ></sp-theme>`;\n    }\n\n    get dialog() {\n        return this.shadowRoot.querySelector('sp-dialog-base');\n    }\n\n    closeModal(e) {\n        e.preventDefault();\n        this.dialog?.close();\n        document.body.classList.remove('merch-modal');\n    }\n\n    openModal() {\n        this.updateComplete.then(async () => {\n            disableBodyScroll(this.dialog);\n            document.body.classList.add('merch-modal');\n            const options = {\n                trigger: this.#target,\n                notImmediatelyClosable: true,\n                type: 'auto',\n            };\n            const overlay = await window.__merch__spectrum_Overlay.open(\n                this.dialog,\n                options,\n            );\n            overlay.addEventListener('close', () => {\n                this.modal = false;\n                document.body.classList.remove('merch-modal');\n                enableBodyScroll(this.dialog);\n            });\n            this.shadowRoot.querySelector('sp-theme').append(overlay);\n        });\n    }\n\n    updated() {\n        if (this.modal) this.openModal();\n    }\n\n    showModal({ target }) {\n        this.#target = target;\n        this.modal = true;\n    }\n}\n\ncustomElements.define('merch-sidenav', MerchSideNav);\n", "/*\nCopyright 2020 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport type { ReactiveController, ReactiveElement } from 'lit';\n\nexport const DARK_MODE = '(prefers-color-scheme: dark)';\nexport const IS_MOBILE =\n    '(max-width: 700px) and (hover: none) and (pointer: coarse), (max-height: 700px) and (hover: none) and (pointer: coarse)';\n\nexport class MatchMediaController implements ReactiveController {\n    key = Symbol('match-media-key');\n\n    matches = false;\n\n    protected host: ReactiveElement;\n\n    protected media: MediaQueryList;\n\n    constructor(host: ReactiveElement, query: string) {\n        this.host = host;\n        this.host.addController(this);\n        this.media = window.matchMedia(query);\n        this.matches = this.media.matches;\n        this.onChange = this.onChange.bind(this);\n        host.addController(this);\n    }\n\n    public hostConnected(): void {\n        this.media?.addEventListener('change', this.onChange);\n    }\n\n    public hostDisconnected(): void {\n        this.media?.removeEventListener('change', this.onChange);\n    }\n\n    protected onChange(event: MediaQueryListEvent): void {\n        if (this.matches === event.matches) return;\n        this.matches = event.matches;\n        this.host.requestUpdate(this.key, !this.matches);\n    }\n}\n", "import { css } from 'lit';\n\nexport const headingStyles = css`\n    h2 {\n        font-size: 11px;\n        font-style: normal;\n        font-weight: 500;\n        height: 32px;\n        letter-spacing: 0.06em;\n        padding: 0 12px;\n        line-height: 32px;\n        color: #737373;\n    }\n`;\n", "import { html, LitElement } from 'lit';\nimport { debounce } from './utils.js';\nimport { EVENT_MERCH_SEARCH_CHANGE } from './constants.js';\nimport {\n    deeplink,\n    pushStateFromComponent,\n    parseState,\n} from './deeplink.js';\n\nexport class MerchSearch extends LitElement {\n    static properties = {\n        deeplink: { type: String },\n    };\n\n    get search() {\n        return this.querySelector(`sp-search`);\n    }\n\n    constructor() {\n        super();\n\n        this.handleInput = () => {\n            pushStateFromComponent(this, this.search.value);\n            if (this.search.value) {\n                this.dispatchEvent(\n                    new CustomEvent(EVENT_MERCH_SEARCH_CHANGE, {\n                        bubbles: true,\n                        composed: true,\n                        detail: {\n                            type: 'search',\n                            value: this.search.value,\n                        },\n                    }),\n                );\n            }\n        };\n        this.handleInputDebounced = debounce(this.handleInput.bind(this));\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        if (!this.search) return;\n        this.search.addEventListener('input', this.handleInputDebounced);\n        this.search.addEventListener('submit', this.handleInputSubmit);\n        this.updateComplete.then(() => {\n            this.setStateFromURL();\n        });\n        this.startDeeplink();\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.search.removeEventListener('input', this.handleInputDebounced);\n        this.search.removeEventListener('submit', this.handleInputSubmit);\n        this.stopDeeplink?.();\n    }\n\n    /*\n     * set the state of the search based on the URL\n     */\n    setStateFromURL() {\n        const state = parseState();\n        const value = state[this.deeplink];\n        if (value) {\n            this.search.value = value;\n        }\n    }\n\n    startDeeplink() {\n        this.stopDeeplink = deeplink(({ search }) => {\n            this.search.value = search ?? '';\n        });\n    }\n\n    handleInputSubmit(event) {\n        event.preventDefault();\n    }\n\n    render() {\n        return html`<slot></slot>`;\n    }\n}\n\ncustomElements.define('merch-search', MerchSearch);\n", "export function debounce(func, delay) {\n    let debounceTimer;\n    return function () {\n        const context = this;\n        const args = arguments;\n        clearTimeout(debounceTimer);\n        debounceTimer = setTimeout(() => func.apply(context, args), delay);\n    };\n}\n\nexport const getSlotText = (element, name) =>\n    element.querySelector(`[slot=\"${name}\"]`)?.textContent?.trim();\n\n/**\n * Helper function to create an element with attributes\n * @param {string} tag\n * @param {Object} attributes\n * @param {*} content\n * @returns {HTMLElement}\n */\nexport function createTag(tag, attributes = {}, content = null, is = null) {\n    const element = is\n        ? document.createElement(tag, { is })\n        : document.createElement(tag);\n    if (content instanceof HTMLElement) {\n        element.appendChild(content);\n    } else {\n        element.innerHTML = content;\n    }\n\n    // Set attributes\n    for (const [key, value] of Object.entries(attributes)) {\n        element.setAttribute(key, value);\n    }\n    return element;\n}\n\n/**\n * Checks if the current device is mobile based on the screen width.\n * @returns {boolean} True if the device is mobile, otherwise false.\n */\nexport function isMobile() {\n    return window.matchMedia('(max-width: 767px)').matches;\n}\n\n/**\n * Checks if the current device is mobile or tablet based on the screen width.\n * @returns {boolean} True if the device is mobile, otherwise false.\n */\nexport function isMobileOrTablet() {\n    return window.matchMedia('(max-width: 1024px)').matches;\n}\n\n/* c8 ignore next 4 */\nexport function wait(ms = 1000) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n", "/**\n * Common namespace prefix for CSS classes and DOM event types.\n * @see https://git.corp.adobe.com/wcms/team/discussions/27\n */\nexport const NAMESPACE = 'merch';\n/**\n * This CSS class name is used to:\n * - show only selected offer on a card connected to a subscription panel\n * - TBD\n */\nexport const CLASS_NAME_HIDDEN = 'hidden';\n/**\n * Event type dispatched by the commenrce service whenever it is ready.\n * Should be in sync with `packages/commerce/src/constants.js`.\n */\nexport const EVENT_TYPE_READY = 'wcms:commerce:ready';\n/**\n * Tag name of the commerce service component.\n * Should be in sync with `packages/commerce/src/constants.js`.\n */\nexport const TAG_NAME_SERVICE = 'mas-commerce-service';\n\n/** Event to dispatch when a merch-offer is ready */\nexport const EVENT_MERCH_OFFER_READY = 'merch-offer:ready';\n\n/** Event to dispatch when all the offers of a merch-offer-select sont ready */\nexport const EVENT_MERCH_OFFER_SELECT_READY = 'merch-offer-select:ready';\n\n/** Event to dispatch when a merch-card is ready */\nexport const EVENT_MERCH_CARD_READY = 'merch-card:ready';\n\nexport const EVENT_MERCH_CARD_ACTION_MENU_TOGGLE =\n    'merch-card:action-menu-toggle';\n\nexport const EVENT_OFFER_SELECTED = 'merch-offer:selected';\n\nexport const EVENT_MERCH_STOCK_CHANGE = 'merch-stock:change';\n\nexport const EVENT_MERCH_STORAGE_CHANGE = 'merch-storage:change';\n\nexport const EVENT_MERCH_QUANTITY_SELECTOR_CHANGE =\n    'merch-quantity-selector:change';\n\nexport const EVENT_MERCH_SEARCH_CHANGE = 'merch-search:change';\n\nexport const EVENT_MERCH_CARD_COLLECTION_SORT = 'merch-card-collection:sort';\n\nexport const EVENT_MERCH_CARD_COLLECTION_SHOWMORE =\n    'merch-card-collection:showmore';\n\nexport const EVENT_MERCH_SIDENAV_SELECT = 'merch-sidenav:select';\n\nexport const EVENT_AEM_LOAD = 'aem:load';\nexport const EVENT_AEM_ERROR = 'aem:error';\nexport const EVENT_MAS_READY = 'mas:ready';\nexport const EVENT_MAS_ERROR = 'mas:error';\n\nexport const CLASS_NAME_FAILED = 'placeholder-failed';\nexport const CLASS_NAME_PENDING = 'placeholder-pending';\nexport const CLASS_NAME_RESOLVED = 'placeholder-resolved';\n\nexport const ERROR_MESSAGE_BAD_REQUEST = 'Bad WCS request';\nexport const ERROR_MESSAGE_OFFER_NOT_FOUND = 'Commerce offer not found';\nexport const ERROR_MESSAGE_MISSING_LITERALS_URL = 'Literals URL not provided';\n\nexport const EVENT_TYPE_FAILED = 'mas:failed';\nexport const EVENT_TYPE_RESOLVED = 'mas:resolved';\n\nexport const LOG_NAMESPACE = 'mas/commerce';\n\nexport const PARAM_ENV = 'commerce.env';\nexport const PARAM_LANDSCAPE = 'commerce.landscape';\nexport const PARAM_AOS_API_KEY = 'commerce.aosKey';\nexport const PARAM_WCS_API_KEY = 'commerce.wcsKey';\n\nexport const WCS_PROD_URL = 'https://www.adobe.com/web_commerce_artifact';\nexport const WCS_STAGE_URL =\n    'https://www.stage.adobe.com/web_commerce_artifact_stage';\n\nexport const STATE_FAILED = 'failed';\nexport const STATE_PENDING = 'pending';\nexport const STATE_RESOLVED = 'resolved';\n\nexport const Landscape = {\n    DRAFT: 'DRAFT',\n    PUBLISHED: 'PUBLISHED',\n};\n", "const EVENT_HASHCHANGE = 'hashchange';\n\n/**\n * @param {*} hash string representing an URL hash\n * @returns an object representing the state set with key value pairs in the URL hash\n */\nexport function parseState(hash = window.location.hash) {\n    const result = [];\n    const keyValuePairs = hash.replace(/^#/, '').split('&');\n\n    for (const pair of keyValuePairs) {\n        const [key, value = ''] = pair.split('=');\n        if (key) {\n            result.push([key, decodeURIComponent(value.replace(/\\+/g, ' '))]);\n        }\n    }\n    return Object.fromEntries(result);\n}\n\n/**\n * push state of a component to the URL hash. Component is supposed to have\n *  a deeplink property, and value is supposed to be a non empty string\n * @param {*} component component with deeplink property\n * @param {*} value value to push as state\n */\nexport function pushStateFromComponent(component, value) {\n    if (component.deeplink) {\n        const state = {};\n        state[component.deeplink] = value;\n        pushState(state);\n    }\n}\n\nexport function pushState(state) {\n    const hash = new URLSearchParams(window.location.hash.slice(1));\n    Object.entries(state).forEach(([key, value]) => {\n        if (value) {\n            hash.set(key, value);\n        } else {\n            hash.delete(key);\n        }\n    });\n    hash.sort();\n    const value = hash.toString();\n    if (value === window.location.hash) return;\n    let lastScrollTop = window.scrollY || document.documentElement.scrollTop;\n    window.location.hash = value;\n    window.scrollTo(0, lastScrollTop);\n}\n\n/**\n *Deep link helper\n * @param {*} callback function that expects an object with properties that have changed compared to previous state\n * @returns a disposer function that stops listening to hash changes\n */\nexport function deeplink(callback) {\n    const handler = () => {\n        if (window.location.hash && !window.location.hash.includes('=')) return;\n        const state = parseState(window.location.hash);\n        callback(state);\n    };\n    handler();\n    window.addEventListener(EVENT_HASHCHANGE, handler);\n    return () => {\n        window.removeEventListener(EVENT_HASHCHANGE, handler);\n    };\n}\n", "import { html, LitElement, css } from 'lit';\nimport { parseState, pushStateFromComponent } from '../deeplink.js';\nimport { headingStyles } from './merch-sidenav-heading.css.js';\nimport { debounce } from '../utils';\nimport { EVENT_MERCH_SIDENAV_SELECT } from '../constants.js';\nexport class MerchSidenavList extends LitElement {\n    static properties = {\n        sidenavListTitle: { type: String },\n        label: { type: String },\n        deeplink: { type: String, attribute: 'deeplink' },\n        selectedText: {\n            type: String,\n            reflect: true,\n            attribute: 'selected-text',\n        },\n        selectedValue: {\n            type: String,\n            reflect: true,\n            attribute: 'selected-value',\n        },\n    };\n\n    static styles = [\n        css`\n            :host {\n                display: block;\n                contain: content;\n                padding-top: 16px;\n            }\n            .right {\n                position: absolute;\n                right: 0;\n            }\n\n            ::slotted(sp-sidenav.resources) {\n                --mod-sidenav-item-background-default-selected: transparent;\n                --mod-sidenav-content-color-default-selected: var(\n                    --highcontrast-sidenav-content-color-default,\n                    var(\n                        --mod-sidenav-content-color-default,\n                        var(--spectrum-sidenav-content-color-default)\n                    )\n                );\n            }\n        `,\n        headingStyles,\n    ];\n\n    constructor() {\n        super();\n        this.handleClickDebounced = debounce(this.handleClick.bind(this));\n    }\n\n    selectElement(element, selected = true) {\n        if (element.parentNode.tagName === 'SP-SIDENAV-ITEM') {\n            this.selectElement(element.parentNode, false);\n        }\n        if (selected) {\n            this.selectedElement = element;\n            this.selectedText = element.label;\n            this.selectedValue = element.value;\n            setTimeout(() => {\n                element.selected = true;\n            }, 1);\n            this.dispatchEvent(\n                new CustomEvent(EVENT_MERCH_SIDENAV_SELECT, {\n                    bubbles: true,\n                    composed: true,\n                    detail: {\n                        type: 'sidenav',\n                        value: this.selectedValue,\n                        elt: this.selectedElement,\n                    },\n                }),\n            );\n        }\n    }\n\n    /*\n     * set the state of the sidenav based on the URL\n     */\n    setStateFromURL() {\n        const state = parseState();\n        const value = state[this.deeplink] ?? 'all';\n        if (value) {\n            const element = this.querySelector(\n                `sp-sidenav-item[value=\"${value}\"]`,\n            );\n            if (!element) return;\n            this.updateComplete.then(() => {\n                const sideNavItemTagName = 'SP-SIDENAV-ITEM';\n                if (element.firstElementChild?.tagName === sideNavItemTagName) {\n                  element.expanded = true;\n                }\n                this.selectElement(element);\n            });\n        }\n    }\n\n    /**\n     * click handler to manage first level items state of sidenav\n     * @param {*} param\n     */\n    handleClick({ target: item }) {\n        const { value, parentNode } = item;\n\n        this.selectElement(item);\n\n        if (parentNode && parentNode.tagName === 'SP-SIDENAV') {\n            //swc does not consider, in multilevel, first level as a potential selection\n            //and does not close other parents, we'll do that here\n            pushStateFromComponent(this, value);\n            item.selected = true;\n            parentNode\n                .querySelectorAll(\n                    'sp-sidenav-item[expanded],sp-sidenav-item[selected]',\n                )\n                .forEach((item) => {\n                    if (item.value !== value) {\n                        item.expanded = false;\n                        item.selected = false;\n                    }\n                });\n        }\n    }\n\n    /**\n     * leaf level item selection handler\n     * @param {*} event\n     */\n    selectionChanged({ target: { value, parentNode } }) {\n        this.selectElement(\n            this.querySelector(`sp-sidenav-item[value=\"${value}\"]`),\n        );\n        pushStateFromComponent(this, value);\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.addEventListener('click', this.handleClickDebounced);\n        this.updateComplete.then(() => {\n            this.setStateFromURL();\n        });\n    }\n\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        this.removeEventListener('click', this.handleClickDebounced);\n    }\n\n    render() {\n        return html`<div\n            aria-label=\"${this.label}\"\n            @change=\"${(e) => this.selectionChanged(e)}\"\n        >\n            ${this.sidenavListTitle ? html`<h2>${this.sidenavListTitle}</h2>` : ''}\n            <slot></slot>\n        </div>`;\n    }\n}\n\ncustomElements.define('merch-sidenav-list', MerchSidenavList);\n", "import { html, LitElement, css } from 'lit';\nimport { parseState, pushStateFromComponent } from '../deeplink.js';\n\nexport class MerchSidenavCheckboxGroup extends LitElement {\n    static properties = {\n        sidenavCheckboxTitle: { type: String },\n        label: { type: String },\n        deeplink: { type: String },\n        selectedValues: { type: Array, reflect: true },\n        value: { type: String },\n    };\n\n    static styles = css`\n        :host {\n            display: block;\n            contain: content;\n            border-top: 1px solid var(--color-gray-200);\n            padding: 12px;\n        }\n        h3 {\n            font-size: 14px;\n            font-style: normal;\n            font-weight: 700;\n            height: 32px;\n            letter-spacing: 0px;\n            padding: 0px;\n            line-height: 18.2px;\n            color: var(--color-gray-600);\n            margin: 0px;\n        }\n        .checkbox-group {\n            display: flex;\n            flex-direction: column;\n        }\n    `;\n\n    /*\n     * set the state of the sidenav based on the URL\n     */\n    setStateFromURL() {\n        this.selectedValues = [];\n        const { types: state } = parseState();\n        if (state) {\n            this.selectedValues = state.split(',');\n            this.selectedValues.forEach((name) => {\n                const element = this.querySelector(`sp-checkbox[name=${name}]`);\n                if (element) {\n                    element.checked = true;\n                }\n            });\n        }\n    }\n\n    /**\n     * leaf level item change handler\n     * @param {*} event\n     */\n    selectionChanged(event) {\n        const { target } = event;\n        const name = target.getAttribute('name');\n        if (name) {\n            const index = this.selectedValues.indexOf(name);\n            if (target.checked && index === -1) {\n                this.selectedValues.push(name);\n            } else if (!target.checked && index >= 0) {\n                this.selectedValues.splice(index, 1);\n            }\n        }\n        pushStateFromComponent(this, this.selectedValues.join(','));\n    }\n\n    connectedCallback() {\n        super.connectedCallback();\n        this.updateComplete.then(async () => {\n            this.setStateFromURL();\n        });\n    }\n\n    render() {\n        return html`<div aria-label=\"${this.label}\">\n            <h3>${this.sidenavCheckboxTitle}</h3>\n            <div\n                @change=\"${(e) => this.selectionChanged(e)}\"\n                class=\"checkbox-group\"\n            >\n                <slot></slot>\n            </div>\n        </div>`;\n    }\n}\n\ncustomElements.define(\n    'merch-sidenav-checkbox-group',\n    MerchSidenavCheckboxGroup,\n);\n", "export const SPECTRUM_MOBILE_LANDSCAPE = '(max-width: 700px)';\nexport const MOBILE_LANDSCAPE = '(max-width: 767px)';\nexport const TABLET_DOWN = '(max-width: 1199px)';\nexport const TABLET_UP = '(min-width: 768px)';\nexport const DESKTOP_UP = '(min-width: 1200px)';\nexport const LARGE_DESKTOP = '(min-width: 1600px)';\n", "/*\nEnables body scroll locking (for iOS Mobile and Tablet, Android, desktop Safari/Chrome/Firefox) without breaking scrolling of a target element.\nUsage example: when opening a modal, disable body scroll by calling enableBodyScroll, and enable it back when closing the modal by calling disableBodyScroll.\n*/\n\nconst isIosDevice = /iP(ad|hone|od)/.test(window?.navigator?.platform) || (window?.navigator?.platform === 'MacIntel' && window.navigator.maxTouchPoints > 1);\nlet documentListenerAdded = false;\nlet previousBodyOverflowSetting;\n\nexport const disableBodyScroll = (targetElement) => {\n    if (!targetElement) return;\n    if (isIosDevice) {\n        document.body.style.position = 'fixed';\n        targetElement.ontouchmove = (event) => {\n            if (event.targetTouches.length === 1) {\n                event.stopPropagation();\n            }\n        };\n        if (!documentListenerAdded) {\n            document.addEventListener('touchmove', (e) => e.preventDefault());\n            documentListenerAdded = true;\n        }\n    } else {\n        previousBodyOverflowSetting = document.body.style.overflow;\n        document.body.style.overflow = 'hidden';\n    }\n};\n\nexport const enableBodyScroll = (targetElement) => {\n    if (!targetElement) return;\n    if (isIosDevice) {\n        targetElement.ontouchstart = null;\n        targetElement.ontouchmove = null;\n        document.body.style.position = '';\n        document.removeEventListener('touchmove', (e) => e.preventDefault());\n        documentListenerAdded = false;\n    } else {\n        if (previousBodyOverflowSetting !== undefined) {\n            document.body.style.overflow = previousBodyOverflowSetting;\n            previousBodyOverflowSetting = undefined;\n        }\n    }\n};\n"],
  "mappings": "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",
  "names": ["html", "css", "LitElement", "MatchMediaController", "host", "query", "_a", "event", "css", "headingStyles", "html", "LitElement", "debounce", "func", "delay", "debounceTimer", "context", "args", "EVENT_MERCH_SEARCH_CHANGE", "EVENT_MERCH_SIDENAV_SELECT", "EVENT_HASHCHANGE", "parseState", "hash", "result", "keyValuePairs", "pair", "key", "value", "pushStateFromComponent", "component", "state", "pushState", "lastScrollTop", "deeplink", "callback", "handler", "MerchSearch", "LitElement", "pushStateFromComponent", "EVENT_MERCH_SEARCH_CHANGE", "debounce", "value", "parseState", "deeplink", "search", "event", "html", "__publicField", "html", "LitElement", "css", "MerchSidenavList", "LitElement", "debounce", "element", "selected", "EVENT_MERCH_SIDENAV_SELECT", "value", "parseState", "item", "parentNode", "pushStateFromComponent", "html", "__publicField", "css", "headingStyles", "html", "LitElement", "css", "MerchSidenavCheckboxGroup", "LitElement", "state", "parseState", "name", "element", "event", "target", "index", "pushStateFromComponent", "html", "__publicField", "css", "SPECTRUM_MOBILE_LANDSCAPE", "TABLET_DOWN", "isIosDevice", "documentListenerAdded", "previousBodyOverflowSetting", "disableBodyScroll", "targetElement", "event", "enableBodyScroll", "_target", "MerchSideNav", "LitElement", "__privateAdd", "__publicField", "MatchMediaController", "SPECTRUM_MOBILE_LANDSCAPE", "TABLET_DOWN", "html", "e", "disableBodyScroll", "options", "__privateGet", "overlay", "enableBodyScroll", "target", "__privateSet", "css", "headingStyles"]
}

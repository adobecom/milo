/* eslint-disable */
/* Generated by Milo */

import{html as y,SpectrumElement as g}from"./base.js";import{SystemResolutionController as C,systemResolverUpdatedSymbol as x}from"./reactive-controllers.js";import{property as u,state as I}from"./base.js";import{css as b}from"./base.js";var f=b`
    :host{--spectrum-icon-inline-size:var(--mod-icon-inline-size,var(--mod-icon-size,var(--spectrum-icon-size)));--spectrum-icon-block-size:var(--mod-icon-block-size,var(--mod-icon-size,var(--spectrum-icon-size)));inline-size:var(--spectrum-icon-inline-size);block-size:var(--spectrum-icon-block-size);color:inherit;color:var(--mod-icon-color,inherit);fill:currentColor;pointer-events:none;display:inline-block}@media (forced-colors:active){:host{forced-color-adjust:auto}}:host{--spectrum-icon-size:var(--spectrum-workflow-icon-size-100)}:host([size=xxs]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-xxs)}:host([size=xs]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-50)}:host([size=s]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-75)}:host([size=l]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-200)}:host([size=xl]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-300)}:host([size=xxl]){--spectrum-icon-size:var(--spectrum-workflow-icon-size-xxl)}#container{height:100%}img,svg,::slotted(*){height:100%;width:100%;vertical-align:top;color:inherit}@media (forced-colors:active){img,svg,::slotted(*){forced-color-adjust:auto}}:host(:not(:root)){overflow:hidden}
`,d=f;var w=Object.defineProperty,z=Object.getOwnPropertyDescriptor,p=(r,e,t,o)=>{for(var s=o>1?void 0:o?z(e,t):e,i=r.length-1,n;i>=0;i--)(n=r[i])&&(s=(o?n(e,t,s):n(s))||s);return o&&s&&w(e,t,s),s},c=class extends g{constructor(){super(...arguments),this.unsubscribeSystemContext=null,this.spectrumVersion=1,this.label="",this.systemResolver=new C(this)}static get styles(){return[d]}connectedCallback(){super.connectedCallback()}disconnectedCallback(){super.disconnectedCallback(),this.unsubscribeSystemContext&&(this.unsubscribeSystemContext(),this.unsubscribeSystemContext=null)}update(e){e.has("label")&&(this.label?this.removeAttribute("aria-hidden"):this.setAttribute("aria-hidden","true")),e.has(x)&&(this.spectrumVersion=this.systemResolver.system==="spectrum-two"?2:1),super.update(e)}render(){return y`
            <slot></slot>
        `}};p([I()],c.prototype,"spectrumVersion",2),p([u({reflect:!0})],c.prototype,"label",2),p([u({reflect:!0})],c.prototype,"size",2);import{html as h}from"./base.js";import{property as v,query as P}from"./base.js";import{ifDefined as S}from"./base.js";var l=class r{constructor(){this.iconsetMap=new Map}static getInstance(){return r.instance||(r.instance=new r),r.instance}addIconset(e,t){this.iconsetMap.set(e,t);let o=new CustomEvent("sp-iconset-added",{bubbles:!0,composed:!0,detail:{name:e,iconset:t}});setTimeout(()=>window.dispatchEvent(o),0)}removeIconset(e){this.iconsetMap.delete(e);let t=new CustomEvent("sp-iconset-removed",{bubbles:!0,composed:!0,detail:{name:e}});setTimeout(()=>window.dispatchEvent(t),0)}getIconset(e){return this.iconsetMap.get(e)}};var k=Object.defineProperty,E=Object.getOwnPropertyDescriptor,m=(r,e,t,o)=>{for(var s=o>1?void 0:o?E(e,t):e,i=r.length-1,n;i>=0;i--)(n=r[i])&&(s=(o?n(e,t,s):n(s))||s);return o&&s&&k(e,t,s),s},a=class extends c{constructor(){super(...arguments),this.iconsetListener=e=>{if(!this.name)return;let t=this.parseIcon(this.name);e.detail.name===t.iconset&&(this.updateIconPromise=this.updateIcon())}}connectedCallback(){super.connectedCallback(),window.addEventListener("sp-iconset-added",this.iconsetListener)}disconnectedCallback(){super.disconnectedCallback(),window.removeEventListener("sp-iconset-added",this.iconsetListener)}firstUpdated(){this.updateIconPromise=this.updateIcon()}attributeChangedCallback(e,t,o){super.attributeChangedCallback(e,t,o),this.updateIconPromise=this.updateIcon()}announceIconImageSrcError(){this.dispatchEvent(new Event("error",{cancelable:!1,bubbles:!1,composed:!1}))}render(){return this.name?h`
                <div id="container"></div>
            `:this.src?h`
                <img
                    src="${this.src}"
                    alt=${S(this.label)}
                    @error=${this.announceIconImageSrcError}
                />
            `:super.render()}async updateIcon(){if(this.updateIconPromise&&await this.updateIconPromise,!this.name)return Promise.resolve();let e=this.parseIcon(this.name),t=l.getInstance().getIconset(e.iconset);return!t||!this.iconContainer?Promise.resolve():(this.iconContainer.innerHTML="",t.applyIconToElement(this.iconContainer,e.icon,this.size||"",this.label?this.label:""))}parseIcon(e){let t=e.split(":"),o="default",s=e;return t.length>1&&(o=t[0],s=t[1]),{iconset:o,icon:s}}async getUpdateComplete(){let e=await super.getUpdateComplete();return await this.updateIconPromise,e}};m([v()],a.prototype,"src",2),m([v()],a.prototype,"name",2),m([P("#container")],a.prototype,"iconContainer",2);export*from"./icons/checkmark.js";var F={};export{a as Icon,c as IconBase,F as default};

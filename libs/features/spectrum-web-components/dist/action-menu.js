/* eslint-disable */
/* Generated by Milo */

import{html as i}from"./base.js";import{state as f}from"./base.js";import{ifDefined as d}from"./base.js";import{property as h}from"./base.js";import{DESCRIPTION_ID as v,PickerBase as g}from"./picker.js";import"./action-button.js";import{ObserveSlotPresence as $}from"./shared.js";import{ObserveSlotText as w}from"./shared.js";import"./icons-workflow.js";import{css as u}from"./base.js";var b=u`
    :host{display:inline-flex}:host([quiet]){min-width:0}:host>sp-menu{display:none}::slotted([slot=icon]){flex-shrink:0}.icon{flex-shrink:0}#popover{max-width:none}:host([dir=ltr]) ::slotted([slot=icon]),:host([dir=ltr]) .icon{margin-left:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-padding-left-adjusted)))}:host([dir=rtl]) ::slotted([slot=icon]),:host([dir=rtl]) .icon{margin-right:calc(-1*(var(--spectrum-actionbutton-textonly-padding-left-adjusted) - var(--spectrum-actionbutton-padding-left-adjusted)))}:host([dir]) slot[icon-only]::slotted([slot=icon]),:host([dir]) slot[icon-only] .icon{margin-inline:calc((var(--custom-actionbutton-edge-to-text,var(--spectrum-actionbutton-edge-to-text)) - var(--custom-actionbutton-edge-to-visual-only,var(--spectrum-actionbutton-edge-to-visual-only)))*-1)}sp-overlay:not(:defined){display:none}
`,p=b;import{SlottableRequestEvent as x}from"./overlay.js";var m=Object.defineProperty,y=Object.getOwnPropertyDescriptor,c=(l,t,a,s)=>{for(var e=s>1?void 0:s?y(t,a):t,n=l.length-1,r;n>=0;n--)(r=l[n])&&(e=(s?r(t,a,e):r(e))||e);return s&&e&&m(t,a,e),e},o=class extends $(w(g,"label"),'[slot="label-only"]'){constructor(){super(...arguments),this.selects=void 0,this.listRole="menu",this.itemRole="menuitem",this.handleSlottableRequest=t=>{this.dispatchEvent(new x(t.name,t.data))}}static get styles(){return[p]}get hasLabel(){return this.slotHasContent}get labelOnly(){return this.slotContentIsPresent}get buttonContent(){return[i`
                ${this.labelOnly?i``:i`
                          <slot
                              name="icon"
                              slot="icon"
                              ?icon-only=${!this.hasLabel}
                              ?hidden=${this.labelOnly}
                          >
                              <sp-icon-more
                                  class="icon"
                                  size=${this.size}
                              ></sp-icon-more>
                          </slot>
                      `}
                <slot name="label" ?hidden=${!this.hasLabel}></slot>
                <slot name="label-only"></slot>
            `]}render(){return this.tooltipEl&&(this.tooltipEl.disabled=this.open),i`
            <sp-action-button
                aria-describedby=${v}
                ?quiet=${this.quiet}
                ?selected=${this.open}
                static-color=${d(this.staticColor)}
                aria-haspopup="true"
                aria-controls=${d(this.open?"menu":void 0)}
                aria-expanded=${this.open?"true":"false"}
                aria-label=${d(this.label||void 0)}
                id="button"
                class="button"
                size=${this.size}
                @blur=${this.handleButtonBlur}
                @focus=${this.handleButtonFocus}
                @keydown=${{handleEvent:this.handleEnterKeydown,capture:!0}}
                ?disabled=${this.disabled}
            >
                ${this.buttonContent}
            </sp-action-button>
            <slot
                name="tooltip"
                @slotchange=${this.handleTooltipSlotchange}
            ></slot>
            ${this.renderMenu} ${this.renderDescriptionSlot}
        `}update(t){t.has("invalid")&&(this.invalid=!1),super.update(t)}hasAccessibleLabel(){return!!this.label||!!this.getAttribute("aria-label")||!!this.getAttribute("aria-labelledby")||!!this.appliedLabel||this.hasLabel||this.labelOnly}warnNoLabel(){window.__swc.warn(this,`<${this.localName}> needs one of the following to be accessible:`,"https://opensource.adobe.com/spectrum-web-components/components/action-menu/#accessibility",{type:"accessibility",issues:[`an <sp-field-label> element with a \`for\` attribute referencing the \`id\` of the \`<${this.localName}>\`, or`,'value supplied to the "label" attribute, which will be displayed visually as placeholder text','text content supplied in a <span> with slot="label", or, text content supplied in a <span> with slot="label-only"',"which will also be displayed visually as placeholder text."]})}};c([h({type:String})],o.prototype,"selects",2),c([h({reflect:!0,attribute:"static-color"})],o.prototype,"staticColor",2),c([f()],o.prototype,"labelOnly",1);import{defineElement as O}from"./base.js";O("sp-action-menu",o);

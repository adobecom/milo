const BlockMediator=(()=>{const l={};const a=c=>{l[c]={callbacks:[],value:undefined}};const r=c=>c in l;const c=()=>Object.keys(l);const u=c=>l[c]?.value;const s=(c,s)=>{if(!r(c)){a(c)}const t=u(c);l[c].value=s;const e=[];for(const o of l[c].callbacks){try{o({oldValue:t,newValue:s})}catch(c){e.push(c)}}if(e.length>0){const n=new Error(e.map(c=>c.message).join("\n"));n.errors=e;throw n}};const t=(c,s)=>{if(!r(c)){a(c)}const t=l[c];if(t.callbacks.includes(s))return()=>{};t.callbacks.push(s);const e=()=>{t.callbacks=t.callbacks.filter(c=>c!==s)};return e};return{hasStore:r,listStores:c,get:u,set:s,subscribe:t}})();export default BlockMediator;
